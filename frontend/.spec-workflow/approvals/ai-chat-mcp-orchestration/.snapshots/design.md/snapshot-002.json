{
  "id": "snapshot_1758820545523_oq5ymikzu",
  "approvalId": "approval_1758820451846_5x5p82txs",
  "approvalTitle": "AI聊天MCP工具编排功能设计文档审批",
  "version": 2,
  "timestamp": "2025-09-25T17:15:45.523Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# AI聊天MCP工具编排功能 — 设计说明（Design）\n\n## 概述\n\n本设计文档描述了为Appflowy AI聊天功能增加MCP工具调用和智能体任务规划执行能力的技术实现方案。该功能将在现有AI聊天架构基础上，增加任务规划器、执行器、用户确认机制和执行追溯能力，支持跨平台部署。\n\n## 指导文档对齐\n\n### 技术标准\n- 遵循Appflowy现有的BLoC状态管理模式\n- 采用Rust FFI + Flutter的跨平台架构\n- 保持模块化设计和单一职责原则\n- 使用现有的国际化和主题系统\n\n### 项目结构\n- Flutter UI层：`appflowy_flutter/lib/plugins/ai_chat/`\n- Rust核心层：`rust-lib/flowy-ai/src/`\n- FFI接口层：`rust-lib/dart-ffi/src/`\n- 资源文件：`assets/translations/`\n\n## 代码复用分析\n\n### 现有组件复用\n\n- **ChatBloc**: 扩展现有聊天状态管理，增加任务规划和执行状态\n- **AgentService**: 基于现有的智能体服务框架进行增强\n- **MCPClientManager**: 复用现有MCP客户端管理器\n- **ChatMessageStream**: 扩展消息流处理，支持执行日志流\n- **SettingsAIBloc**: 扩展AI设置管理，增加智能体配置\n\n### 集成点\n\n- **现有聊天UI**: 在`chat_footer.dart`中集成MCP选择器\n- **消息渲染**: 扩展`ai_text_message.dart`支持执行日志显示\n- **设置界面**: 在现有AI设置页面中增加智能体管理\n- **数据存储**: 集成现有的KV存储和SQLite数据库\n\n## 架构\n\n本功能采用分层架构，在现有AI聊天系统基础上增加任务编排层：\n\n```mermaid\ngraph TD\n    A[Flutter UI Layer] --> B[Application Layer]\n    B --> C[Rust Core Layer]\n    C --> D[MCP Tools]\n    \n    subgraph \"Flutter UI Layer\"\n        A1[Chat Page]\n        A2[Settings Page]\n        A3[Task Confirmation Dialog]\n        A4[Execution Log Viewer]\n    end\n    \n    subgraph \"Application Layer\"\n        B1[ChatBloc]\n        B2[TaskPlannerBloc]\n        B3[AgentConfigBloc]\n        B4[ExecutionLogBloc]\n    end\n    \n    subgraph \"Rust Core Layer\"\n        C1[AI Manager]\n        C2[Task Orchestrator]\n        C3[MCP Client Manager]\n        C4[Execution Logger]\n    end\n    \n    subgraph \"MCP Tools\"\n        D1[Document Tools]\n        D2[Web Search]\n        D3[RAG Tools]\n        D4[Custom MCP]\n    end\n```\n\n### 模块化设计原则\n\n- **单文件职责**: 每个文件处理单一关注点或领域\n- **组件隔离**: 创建小型、专注的组件而非大型单体文件\n- **服务层分离**: 分离数据访问、业务逻辑和表示层\n- **工具模块化**: 将工具分解为专注的单一目的模块\n\n## 组件和接口\n\n### 组件1: TaskPlannerBloc\n\n- **目的**: 管理任务规划状态和用户确认流程\n- **接口**: \n  - `planTask(String userQuery, List<String> selectedMcpIds)`\n  - `confirmPlan(TaskPlan plan)`\n  - `rejectPlan(String reason)`\n- **依赖**: ChatBloc, AI Manager\n- **复用**: 基于现有BLoC模式，复用ChatBloc的状态管理机制\n\n### 组件2: TaskExecutorService\n\n- **目的**: 执行任务计划，调用MCP工具并管理执行流程\n- **接口**:\n  - `executeTask(TaskPlan plan, ExecutionContext context)`\n  - `cancelExecution(String executionId)`\n  - `getExecutionStatus(String executionId)`\n- **依赖**: MCP Client Manager, Execution Logger\n- **复用**: 扩展现有AgentExecutor，集成MCPClientManager\n\n### 组件3: AgentConfigManager\n\n- **目的**: 管理智能体配置和权限设置\n- **接口**:\n  - `createAgent(AgentConfig config)`\n  - `updateAgent(String agentId, AgentConfig config)`\n  - `getAvailableTools(String agentId)`\n- **依赖**: Settings Storage, MCP Manager\n- **复用**: 集成现有SettingsAIBloc和KV存储\n\n### 组件4: ExecutionLogViewer\n\n- **目的**: 显示和管理执行日志，支持追溯和导出\n- **接口**:\n  - `showExecutionLog(String executionId)`\n  - `exportLog(String executionId, ExportFormat format)`\n  - `searchLogs(LogSearchCriteria criteria)`\n- **依赖**: Execution Logger, UI Components\n- **复用**: 基于现有聊天消息渲染组件\n\n### 组件5: McpToolSelector\n\n- **目的**: 在聊天界面提供MCP工具选择功能\n- **接口**:\n  - `getAvailableTools()`\n  - `selectTools(List<String> toolIds)`\n  - `validateToolAvailability(List<String> toolIds)`\n- **依赖**: MCP Client Manager, UI State\n- **复用**: 集成到现有chat_footer.dart组件\n\n## 数据模型\n\n### TaskPlan\n```dart\nclass TaskPlan {\n  final String id;\n  final String userQuery;\n  final String overallStrategy;\n  final List<TaskStep> steps;\n  final List<String> requiredMcpTools;\n  final DateTime createdAt;\n  final TaskPlanStatus status;\n}\n```\n\n### TaskStep\n```dart\nclass TaskStep {\n  final String id;\n  final String description;\n  final String mcpToolId;\n  final Map<String, dynamic> parameters;\n  final List<String> dependencies;\n  final TaskStepStatus status;\n}\n```\n\n### AgentConfig\n```dart\nclass AgentConfig {\n  final String id;\n  final String name;\n  final String personality;\n  final String systemPrompt;\n  final List<String> allowedTools;\n  final List<String> deniedTools;\n  final String languagePreference;\n  final DateTime createdAt;\n  final DateTime updatedAt;\n}\n```\n\n### ExecutionLog\n```dart\nclass ExecutionLog {\n  final String id;\n  final String sessionId;\n  final String taskPlanId;\n  final List<ExecutionStep> steps;\n  final DateTime startTime;\n  final DateTime? endTime;\n  final ExecutionStatus status;\n  final String? errorMessage;\n}\n```\n\n### ExecutionStep\n```dart\nclass ExecutionStep {\n  final String id;\n  final String stepDescription;\n  final String mcpToolName;\n  final Map<String, dynamic> inputParameters;\n  final Map<String, dynamic>? outputResult;\n  final Duration executionTime;\n  final List<String> references;\n  final StepStatus status;\n}\n```\n\n### McpToolInfo\n```dart\nclass McpToolInfo {\n  final String id;\n  final String name;\n  final String description;\n  final McpTransportType transport;\n  final Map<String, dynamic> schema;\n  final bool isAvailable;\n  final DateTime lastChecked;\n}\n```\n\n## Rust核心层数据模型\n\n### TaskOrchestrator (Rust)\n```rust\npub struct TaskOrchestrator {\n    mcp_manager: Arc<MCPClientManager>,\n    execution_logger: Arc<ExecutionLogger>,\n    agent_configs: Arc<RwLock<HashMap<String, AgentConfig>>>,\n}\n\nimpl TaskOrchestrator {\n    pub async fn plan_task(&self, query: &str, available_tools: &[String]) -> Result<TaskPlan>;\n    pub async fn execute_plan(&self, plan: TaskPlan) -> Result<ExecutionResult>;\n    pub async fn cancel_execution(&self, execution_id: &str) -> Result<()>;\n}\n```\n\n### ExecutionLogger (Rust)\n```rust\npub struct ExecutionLogger {\n    db_connection: Arc<SqliteConnection>,\n}\n\nimpl ExecutionLogger {\n    pub async fn log_execution_start(&self, plan: &TaskPlan) -> Result<String>;\n    pub async fn log_step_completion(&self, execution_id: &str, step: ExecutionStep) -> Result<()>;\n    pub async fn get_execution_history(&self, session_id: &str) -> Result<Vec<ExecutionLog>>;\n}\n```\n\n## 错误处理\n\n### 错误场景\n\n1. **MCP工具不可用**\n   - **处理**: 显示工具状态，提供替代方案或跳过该工具\n   - **用户影响**: 显示警告信息，允许用户选择继续或重新规划\n\n2. **任务规划失败**\n   - **处理**: 记录错误日志，回退到普通聊天模式\n   - **用户影响**: 显示错误信息，提供重试选项\n\n3. **执行超时**\n   - **处理**: 取消当前执行，保存部分结果\n   - **用户影响**: 显示超时信息，提供查看部分结果的选项\n\n4. **权限不足**\n   - **处理**: 检查智能体权限配置，跳过无权限的工具\n   - **用户影响**: 显示权限警告，建议联系管理员\n\n5. **网络连接问题**\n   - **处理**: 实现重试机制，缓存离线数据\n   - **用户影响**: 显示连接状态，提供离线模式\n\n## FFI接口设计\n\n### Dart到Rust事件\n\n```dart\n// 任务规划事件\nclass PlanTaskEvent {\n  final String userQuery;\n  final List<String> selectedMcpIds;\n  final String agentId;\n}\n\n// 执行任务事件\nclass ExecuteTaskEvent {\n  final String taskPlanId;\n  final Map<String, dynamic> executionContext;\n}\n\n// 取消执行事件\nclass CancelExecutionEvent {\n  final String executionId;\n}\n```\n\n### Rust到Dart响应\n\n```rust\n// 任务规划响应\npub struct TaskPlanResponse {\n    pub plan_id: String,\n    pub strategy: String,\n    pub steps: Vec<TaskStepPB>,\n    pub estimated_duration: u64,\n}\n\n// 执行状态更新\npub struct ExecutionStatusUpdate {\n    pub execution_id: String,\n    pub current_step: u32,\n    pub total_steps: u32,\n    pub status: ExecutionStatus,\n    pub current_step_description: String,\n}\n```\n\n## 状态管理架构\n\n### TaskPlannerBloc状态\n\n```dart\n@freezed\nclass TaskPlannerState with _$TaskPlannerState {\n  const factory TaskPlannerState({\n    @Default(TaskPlannerStatus.idle) TaskPlannerStatus status,\n    TaskPlan? currentPlan,\n    String? errorMessage,\n    @Default([]) List<String> availableMcpTools,\n    @Default(false) bool isPlanning,\n  }) = _TaskPlannerState;\n}\n```\n\n### ExecutionBloc状态\n\n```dart\n@freezed\nclass ExecutionState with _$ExecutionState {\n  const factory ExecutionState({\n    @Default(ExecutionStatus.idle) ExecutionStatus status,\n    String? currentExecutionId,\n    ExecutionProgress? progress,\n    @Default([]) List<ExecutionStep> completedSteps,\n    ExecutionStep? currentStep,\n    String? errorMessage,\n  }) = _ExecutionState;\n}\n```\n\n## UI组件设计\n\n### TaskConfirmationDialog\n\n```dart\nclass TaskConfirmationDialog extends StatelessWidget {\n  final TaskPlan plan;\n  final VoidCallback onConfirm;\n  final VoidCallback onReject;\n  \n  @override\n  Widget build(BuildContext context) {\n    return AlertDialog(\n      title: Text('确认任务执行计划'),\n      content: TaskPlanPreview(plan: plan),\n      actions: [\n        TextButton(onPressed: onReject, child: Text('拒绝')),\n        ElevatedButton(onPressed: onConfirm, child: Text('确认执行')),\n      ],\n    );\n  }\n}\n```\n\n### ExecutionProgressWidget\n\n```dart\nclass ExecutionProgressWidget extends StatelessWidget {\n  final ExecutionProgress progress;\n  \n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        LinearProgressIndicator(value: progress.percentage),\n        Text('${progress.currentStep}/${progress.totalSteps}'),\n        Text(progress.currentStepDescription),\n      ],\n    );\n  }\n}\n```\n\n### McpToolSelector\n\n```dart\nclass McpToolSelector extends StatefulWidget {\n  final List<McpToolInfo> availableTools;\n  final List<String> selectedToolIds;\n  final ValueChanged<List<String>> onSelectionChanged;\n  \n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: availableTools.map((tool) => \n        FilterChip(\n          label: Text(tool.name),\n          selected: selectedToolIds.contains(tool.id),\n          onSelected: (selected) => _handleSelection(tool.id, selected),\n        ),\n      ).toList(),\n    );\n  }\n}\n```\n\n## 测试策略\n\n### 单元测试\n\n- TaskPlannerBloc状态转换测试\n- ExecutionLogger数据持久化测试\n- MCP工具调用模拟测试\n- 错误处理场景测试\n\n### 集成测试\n\n- 端到端任务执行流程测试\n- MCP工具集成测试\n- 跨平台兼容性测试\n- 多语言界面测试\n\n### 端到端测试\n\n- 用户完整工作流程测试\n- 任务规划确认流程测试\n- 执行日志查看和导出测试\n- 智能体配置管理测试\n\n## 性能优化\n\n### 异步处理\n\n- 所有MCP工具调用使用异步处理\n- 任务规划和执行过程不阻塞UI线程\n- 使用流式处理显示实时进度\n\n### 缓存策略\n\n- 缓存MCP工具可用性状态\n- 缓存智能体配置信息\n- 缓存执行日志查询结果\n\n### 资源管理\n\n- 限制并发MCP工具调用数量（默认3个）\n- 实现执行超时机制（默认30秒）\n- 定期清理过期的执行日志\n\n## 安全考虑\n\n### 数据保护\n\n- 敏感参数在日志中脱敏处理\n- 执行日志支持加密存储\n- MCP工具调用权限控制\n\n### 访问控制\n\n- 智能体工具权限白名单/黑名单\n- 用户级别的功能访问控制\n- 工作空间级别的配置隔离\n",
  "fileStats": {
    "size": 12029,
    "lines": 473,
    "lastModified": "2025-09-25T17:14:05.075Z"
  },
  "comments": []
}