{
  "id": "snapshot_1759138363113_djwkw7f50",
  "approvalId": "approval_1759138329775_2dr2wmor8",
  "approvalTitle": "AppFlowy MCP支持与AI助手智能体设计文档（完整版）",
  "version": 5,
  "timestamp": "2025-09-29T09:32:43.113Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# AppFlowy MCP支持与AI助手智能体 — 设计说明书\n\n## 概述\n\n本设计文档描述了为AppFlowy引入Model Context Protocol (MCP)管理能力和AI助手智能体功能的技术实现方案。该功能将在现有AI聊天基础上构建一个可扩展的工具调用框架，支持智能体规划、执行和日志记录，并提供跨平台的配置管理界面。\n\n## 指导文档对齐\n\n### 技术标准 (tech.md)\n- 遵循AppFlowy的Flutter前端 + Rust后端架构模式\n- 使用现有的事件驱动通信机制（AFPlugin/AFPluginDispatcher）\n- 复用现有的KVStorePreferences配置存储系统\n- 遵循现有的BLoC状态管理模式\n- 使用现有的多语言支持框架（EasyLocalization）\n\n### 项目结构 (structure.md)\n- MCP相关代码放置在rust-lib/flowy-ai/src/mcp/目录\n- 智能体相关代码放置在rust-lib/flowy-ai/src/agent/目录\n- Flutter UI组件放置在appflowy_flutter/lib/plugins/ai_chat/目录\n- 设置界面扩展现有的settings页面结构\n- 多语言文件放置在frontend/resources/translations/目录\n- 遵循现有的protobuf定义和事件映射模式\n\n## 代码复用分析\n\n### 现有组件复用\n- **AIManager**: 扩展以支持MCP工具管理和智能体调度\n- **ChatServiceMiddleware**: 复用流式响应处理机制\n- **SettingsAIBloc**: 扩展以支持MCP配置管理\n- **KVStorePreferences**: 复用配置存储和作用域管理\n- **AFPluginDispatcher**: 复用事件分发机制\n- **RustStreamReceiver**: 复用实时数据流处理\n\n### 集成点\n- **现有AI事件系统**: 扩展AIEvent枚举以支持MCP和智能体事件\n- **用户设置系统**: 集成到现有的三层设置界面（服务器端/移动端/工作空间）\n- **聊天界面**: 扩展现有聊天UI以显示智能体执行过程和工具调用结果\n- **数据库存储**: 复用现有的SQLite存储方案保存智能体配置和执行日志\n\n## 架构\n\n整体架构采用分层设计，将MCP管理、智能体调度和工具执行分离为独立模块，通过清晰的接口进行交互。\n\n### 模块化设计原则\n- **单文件职责**: 每个文件处理一个特定的领域或关注点\n- **组件隔离**: 创建小而专注的组件，避免大型单体文件\n- **服务层分离**: 分离数据访问、业务逻辑和表示层\n- **工具模块化**: 将工具分解为专注的单一目的模块\n\n```mermaid\ngraph TD\n    A[Flutter UI Layer] --> B[BLoC State Management]\n    B --> C[Rust Event Bridge]\n    C --> D[AI Manager]\n    D --> E[Agent Scheduler]\n    D --> F[MCP Manager]\n    \n    %% AI驱动的规划和执行\n    E --> G[AI-Driven Task Planner]\n    E --> H[AI-Driven Task Executor]\n    G --> AA[Global AI Model]\n    H --> AA\n    \n    %% 工具注册和选择\n    F --> J[Tool Registry]\n    G --> J\n    \n    %% Task Executor通过AI模型工具调用功能调用多种工具\n    H --> N[MCP Tool Invoker]\n    H --> O[Web Search Tool]\n    H --> P[AppFlowy Document Tools]\n    H --> Q[RAG Knowledge Tools]\n    \n    %% MCP Manager管理客户端池\n    F --> I[MCP Client Pool]\n    \n    %% MCP Client Pool支持多种传输方式\n    I --> R[STDIO MCP Client]\n    I --> S[SSE MCP Client]\n    I --> T[HTTP MCP Client]\n    \n    %% MCP Tool Invoker连接到MCP Client Pool\n    N --> I\n    \n    %% 配置和日志存储\n    L[Configuration Storage] --> F\n    L --> E\n    M[Execution Logger] --> E\n    M --> H\n    \n    %% 数据库存储层\n    Y[SQLite Database] --> Z[Agent Config Table]\n    Y --> AA1[MCP Config Table]\n    Y --> BB[Conversation History Table]\n    Y --> CC[Execution Log Table]\n    Y --> DD[Task Plan Table]\n    \n    %% 组件与数据库的连接\n    E --> Y\n    F --> Y\n    M --> Y\n    \n    %% AppFlowy Document Tools的具体实现（仅文档CRUD）\n    P --> U[Document Create]\n    P --> V[Document Read/Search]\n    P --> W[Document Update]\n    P --> X[Document Delete]\n```\n\n## 组件和接口\n\n### MCP管理器 (MCPManager)\n- **目的**: 管理MCP服务器连接、工具发现和调用\n- **接口**: \n  - `connect_server(config: MCPServerConfig) -> Result<(), FlowyError>`\n  - `disconnect_server(server_id: String) -> Result<(), FlowyError>`\n  - `list_tools(server_id: String) -> Result<Vec<MCPTool>, FlowyError>`\n  - `call_tool(server_id: String, tool_name: String, params: Value) -> Result<Value, FlowyError>`\n- **依赖**: MCPClient, KVStorePreferences\n- **复用**: 扩展现有的flowy-ai/src/mcp/manager.rs\n\n### 智能体调度器 (AgentScheduler)\n- **目的**: 管理智能体生命周期、任务规划和执行协调\n- **接口**:\n  - `create_agent(config: AgentConfig) -> Result<AgentId, FlowyError>`\n  - `update_agent(agent_id: AgentId, config: AgentConfig) -> Result<(), FlowyError>`\n  - `delete_agent(agent_id: AgentId) -> Result<(), FlowyError>`\n  - `list_agents() -> Result<Vec<AgentInfo>, FlowyError>`\n  - `start_conversation(agent_id: AgentId, user_input: String) -> Result<ConversationId, FlowyError>`\n  - `process_message(conversation_id: ConversationId, message: String) -> Result<AgentResponse, FlowyError>`\n- **依赖**: TaskPlanner, TaskExecutor, ExecutionLogger, AgentConfigManager\n- **复用**: 新建组件，复用现有的AI调用机制\n\n### 智能体配置管理器 (AgentConfigManager)\n- **目的**: 管理智能体的配置信息，包括名字、个性说明等\n- **接口**:\n  - `save_agent_config(config: AgentConfig) -> Result<(), FlowyError>`\n  - `load_agent_config(agent_id: AgentId) -> Result<AgentConfig, FlowyError>`\n  - `list_agent_configs() -> Result<Vec<AgentConfig>, FlowyError>`\n  - `delete_agent_config(agent_id: AgentId) -> Result<(), FlowyError>`\n- **依赖**: SQLite数据库\n- **复用**: 复用现有的数据库访问模式\n\n### AI驱动任务规划器 (AI-Driven TaskPlanner)\n- **目的**: 基于全局AI大模型和智能体个性配置分析用户问题，智能生成解决方案和子任务\n- **接口**:\n  - `plan_tasks(agent_config: AgentConfig, problem: String, available_tools: Vec<Tool>) -> Result<TaskPlan, FlowyError>`\n  - `replan_on_failure(agent_config: AgentConfig, failed_task: Task, error: String) -> Result<TaskPlan, FlowyError>`\n- **依赖**: AIManager (全局AI模型), ToolRegistry, AgentConfigManager\n- **复用**: 复用现有的AI模型调用机制，扩展支持工具感知的规划\n- **AI驱动特性**: 利用AI模型的推理能力进行任务分解和工具选择，结合智能体个性进行个性化规划\n- **个性化特性**: 在规划过程中融入智能体的个性说明和系统提示词\n\n### AI驱动任务执行器 (AI-Driven TaskExecutor)\n- **目的**: 基于全局AI大模型的工具调用功能和智能体个性执行具体的子任务\n- **接口**:\n  - `execute_task(agent_config: AgentConfig, task: Task) -> Result<TaskResult, FlowyError>`\n  - `execute_with_retry(agent_config: AgentConfig, task: Task, max_retries: u32) -> Result<TaskResult, FlowyError>`\n  - `reflect_and_adjust(agent_config: AgentConfig, task: Task, result: TaskResult) -> Result<Task, FlowyError>`\n- **依赖**: AIManager (全局AI模型), MCPManager, ToolRegistry, AgentConfigManager\n- **复用**: 复用现有的AI模型工具调用基础设施\n- **AI驱动特性**: 利用AI模型的工具调用功能和反思能力进行智能执行\n- **个性化特性**: 在执行过程中保持智能体的个性特征和行为风格\n\n### 工具注册表 (ToolRegistry)\n- **目的**: 管理所有可用工具的元数据和调用接口\n- **接口**:\n  - `register_tool(tool: ToolDefinition) -> Result<(), FlowyError>`\n  - `get_available_tools(agent_id: AgentId) -> Vec<ToolDefinition>`\n  - `get_tool_schema(tool_id: String) -> Result<ToolSchema, FlowyError>`\n- **依赖**: 无\n- **复用**: 新建组件\n\n### 执行日志器 (ExecutionLogger)\n- **目的**: 记录智能体执行过程中的所有操作和结果\n- **接口**:\n  - `log_planning(conversation_id: ConversationId, plan: TaskPlan)`\n  - `log_execution(task_id: TaskId, result: TaskResult)`\n  - `get_conversation_logs(conversation_id: ConversationId) -> Vec<ExecutionLog>`\n- **依赖**: SQLite存储\n- **复用**: 复用现有的数据库访问模式\n\n### MCP工具调用器 (MCPToolInvoker)\n- **目的**: 专门处理MCP工具的调用和结果处理\n- **接口**:\n  - `invoke_mcp_tool(server_id: String, tool_name: String, params: Value) -> Result<Value, FlowyError>`\n  - `get_mcp_tool_schema(server_id: String, tool_name: String) -> Result<ToolSchema, FlowyError>`\n- **依赖**: MCPClientPool\n- **复用**: 新建组件\n\n### Web搜索工具 (WebSearchTool)\n- **目的**: 提供网络搜索能力\n- **接口**:\n  - `search(query: String, options: SearchOptions) -> Result<SearchResults, FlowyError>`\n- **依赖**: HTTP客户端\n- **复用**: 新建组件，为未来扩展预留\n\n### AppFlowy文档工具 (AppFlowyDocumentTools)\n- **目的**: 提供AppFlowy内置的文档CRUD操作能力\n- **接口**:\n  - `create_document(workspace_id: String, title: String, content: String) -> Result<DocumentId, FlowyError>`\n  - `read_document(doc_id: String) -> Result<Document, FlowyError>`\n  - `search_documents(query: String) -> Result<Vec<Document>, FlowyError>`\n  - `update_document(doc_id: String, content: String) -> Result<(), FlowyError>`\n  - `delete_document(doc_id: String) -> Result<(), FlowyError>`\n- **依赖**: 现有的文档服务\n- **复用**: 复用现有的文档管理API，专注于文档CRUD操作\n\n### MCP客户端池 (MCPClientPool)\n- **目的**: 管理不同传输方式的MCP客户端\n- **接口**:\n  - `get_client(server_id: String) -> Result<Arc<dyn MCPClient>, FlowyError>`\n  - `create_stdio_client(config: MCPStdioConfig) -> Result<StdioMCPClient, FlowyError>`\n  - `create_sse_client(config: MCPHttpConfig) -> Result<SSEMCPClient, FlowyError>`\n  - `create_http_client(config: MCPHttpConfig) -> Result<HttpMCPClient, FlowyError>`\n- **依赖**: 各种MCP客户端实现\n- **复用**: 扩展现有的MCP客户端基础\n\n## 数据模型\n\n### MCP服务器配置 (MCPServerConfig)\n```rust\npub struct MCPServerConfig {\n    pub id: String,\n    pub name: String,\n    pub icon: String,\n    pub transport_type: MCPTransportType,\n    pub is_active: bool,\n    pub description: String,\n    pub created_at: DateTime<Utc>,\n    pub updated_at: DateTime<Utc>,\n    pub stdio_config: Option<MCPStdioConfig>,\n    pub http_config: Option<MCPHttpConfig>,\n}\n\npub enum MCPTransportType {\n    Stdio,\n    Http,\n}\n\npub struct MCPStdioConfig {\n    pub command: String,\n    pub args: Vec<String>,\n    pub env_vars: HashMap<String, String>,\n}\n\npub struct MCPHttpConfig {\n    pub url: String,\n    pub headers: HashMap<String, String>,\n}\n```\n\n### 智能体配置 (AgentConfig)\n```rust\npub struct AgentConfig {\n    pub id: String,\n    pub name: String,\n    pub description: String,\n    pub personality: String,\n    pub system_prompt: String,\n    pub available_tools: Vec<String>,\n    pub max_iterations: u32,\n    pub temperature: f32,\n    pub created_at: DateTime<Utc>,\n    pub updated_at: DateTime<Utc>,\n}\n```\n\n### 会话历史 (ConversationHistory)\n```rust\npub struct ConversationHistory {\n    pub id: String,\n    pub agent_id: String,\n    pub user_id: String,\n    pub messages: Vec<ConversationMessage>,\n    pub status: ConversationStatus,\n    pub created_at: DateTime<Utc>,\n    pub updated_at: DateTime<Utc>,\n}\n\npub struct ConversationMessage {\n    pub id: String,\n    pub conversation_id: String,\n    pub role: MessageRole,\n    pub content: String,\n    pub metadata: Value,\n    pub timestamp: DateTime<Utc>,\n}\n\npub enum MessageRole {\n    User,\n    Agent,\n    System,\n}\n\npub enum ConversationStatus {\n    Active,\n    Completed,\n    Paused,\n    Error,\n}\n```\n\n### 任务计划 (TaskPlan)\n```rust\npub struct TaskPlan {\n    pub id: String,\n    pub conversation_id: String,\n    pub problem_description: String,\n    pub tasks: Vec<Task>,\n    pub created_at: DateTime<Utc>,\n}\n\npub struct Task {\n    pub id: String,\n    pub description: String,\n    pub tool_name: String,\n    pub parameters: Value,\n    pub dependencies: Vec<String>,\n    pub status: TaskStatus,\n}\n\npub enum TaskStatus {\n    Pending,\n    InProgress,\n    Completed,\n    Failed,\n}\n```\n\n### 执行日志 (ExecutionLog)\n```rust\npub struct ExecutionLog {\n    pub id: String,\n    pub conversation_id: String,\n    pub log_type: LogType,\n    pub timestamp: DateTime<Utc>,\n    pub content: Value,\n}\n\npub enum LogType {\n    Planning,\n    ToolCall,\n    TaskResult,\n    Error,\n}\n```\n\n## 错误处理\n\n### 错误场景\n1. **MCP连接失败**\n   - **处理**: 记录详细错误信息，提供重试机制，显示连接状态\n   - **用户影响**: 显示连接错误提示，提供手动重连选项\n\n2. **工具调用超时**\n   - **处理**: 设置合理超时时间，实现重试逻辑，记录超时日志\n   - **用户影响**: 显示执行进度，提供取消选项\n\n3. **智能体规划失败**\n   - **处理**: 回退到简单对话模式，记录规划失败原因\n   - **用户影响**: 提示规划失败，继续提供基础AI对话服务\n\n4. **配置验证失败**\n   - **处理**: 提供详细的验证错误信息，高亮错误字段\n   - **用户影响**: 显示具体的配置错误和修复建议\n\n## 测试策略\n\n### 单元测试\n- MCP客户端连接和工具调用测试\n- 智能体规划逻辑测试\n- 任务执行器功能测试\n- 配置验证和存储测试\n\n### 集成测试\n- MCP服务器集成测试（使用模拟MCP服务器）\n- 智能体端到端工作流测试\n- 跨平台配置同步测试\n- 多语言界面测试\n\n### 端到端测试\n- 用户创建和配置智能体的完整流程\n- 智能体解决复杂问题的场景测试\n- MCP工具调用的实际使用场景\n- 错误恢复和重试机制测试\n",
  "fileStats": {
    "size": 13587,
    "lines": 387,
    "lastModified": "2025-09-29T09:31:53.642Z"
  },
  "comments": []
}